stages:
  - ping
  - create jar
#  - build & push docker image
#  - deploy

ping:
  image: ubuntu:latest
  stage: ping
  script:
    - apt-get -o Acquire::http::proxy="http://de.coia.siemens.net:9400" update && apt-get -o Acquire::http::proxy="http://de.coia.siemens.net:9400" install -y curl
    - curl de.coia.siemens.net
    - curl 194.145.60.254

maven-build:
  image: maven:latest
  stage: create jar
  script:
    - mvn compile -Dhttp.proxyHost=194.145.60.254 -Dhttp.proxyPort=9400 -Dhttps.proxyHost=194.145.60.254 -Dhttps.proxyPort=9400 -Dhttp.nonProxyHosts="*.siemens.de|*.siemens.net|*.siemens.com|*.siemens.io|localhost|127.0.0.1"
#  artifacts:
#    paths:
#      - target/nginx:0.0.1-SNAPSHOT.jar


#deploy:
#  image: maven:3.6-jdk-11
#  stage: deploy
#  script:
#    - 'mvn deploy -s ci_settings.xml'
#  only:
#    - main


#docker-build:
#  stage: build & push docker image
#  image:
#    name: gcr.io/kaniko-project/executor:v1.9.1-debug
#    entrypoint: [""]
#  before_script:
#    # - export APP_VERSION=$CI_PIPELINE_IID.$CI_COMMIT_REF_NAME
#    - export http_proxy=194.145.60.254:9400
#    - export https_proxy=194.145.60.254:9400
#    - export no_proxy="*.siemens.de|*.siemens.net|*.siemens.com|*.siemens.io|localhost|127.0.0.1"
#  script:
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
#    - cat /kaniko/.docker/config.json
#    - /kaniko/executor
#      --context "${CI_PROJECT_DIR}"
#      --build-arg http_proxy=$http_proxy
#      --build-arg https_proxy=$https_proxy
#      --build-arg no_proxy=$no_proxy
#      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
#      --destination "${CI_REGISTRY_IMAGE}:V1.0.0"
#  rules:
#    - if: $CI_COMMIT_BRANCH
#      exists:
#        - Dockerfile

